// Generated by CoffeeScript 1.6.3
/*
Module dependencies
*/


(function() {
  var RedisStore, app, client, couchdb, csrf, db, express, fugue, hash;

  require.paths.unshift("" + __dirname + "/lib/support/express-csrf/");

  require.paths.unshift("" + __dirname + "/lib/support/node_hash/lib/");

  express = require('express');

  app = module.exports = express.createServer();

  RedisStore = require('connect-redis');

  csrf = require('csrf.js');

  fugue = require('fugue');

  couchdb = require('couchdb');

  client = couchdb.createClient(5984, 'localhost');

  db = client.db('blahblahblah-devel');

  hash = require('hash.js');

  /*
  Configuration
  */

  app.dynamicHelpers({
    csrf: csrf.token
  });


  app.dynamicHelpers({
    csrf: csrf.token
  });

  app.dynamicHelpers({
    flash: function(req) {
      var flash;
      flash = req.flash();
      return flash;
    }
  });

  app.dynamicHelpers({
    current_user: function(req) {
      return req.session.user;
    }
  });

  app.configure(function() {
    app.set('views', "" + __dirname + "/views");
    app.use(express.logger());
    app.use(express.bodyDecoder());
    app.use(express.cookieDecoder());
    app.use(express.session({
      store: new RedisStore({
        maxAge: 24 * 60 * 60 * 1000
      })
    }));
    app.use(csrf.check());
    app.use(app.router);
    app.use(express.methodOverride());
    return app.use(express.staticProvider("" + __dirname + "/public"));
  });

  app.configure('development', function() {
    return app.use(express.errorHandler({
      dumpExceptions: true,
      showStack: true
    }));
  });

  app.configure('production', function() {
    return app.use(express.errorHandler());
  });

  /*
  ROUTE: ROOT '/' (GET)
  */


  app.get('/', function(req, res) {
    if (req.session.user) {
      req.flash('success', "Authenticated as " + req.session.user.name);
      res.redirect('/dashboard');
    }
    return res.render('index.jade', {
      locals: {
        title: 'Home'
      }
    });
  });

  /*
  ROUTE: DASHBOARD '/dashboard' (GET, POST)
  */


  app.get('/dashboard', function(req, res) {
    if (req.session.user) {
      return res.render('dashboard/index.jade', {
        locals: {
          title: 'Dashboard'
        }
      });
    } else {
      return res.redirect('/login');
    }
  });
  app.post('/dashboard', function(req, res) {
    var params, user;
    params = req.body;
    if (req.session.user) {
      user = req.session.user;
      return console.log(params);
    } else {
      return res.redirect('/login');
    }
  });

  /*
  ROUTE: LOGIN '/login' (GET, POST)
  */


  app.get('/login', function(req, res) {
    if (req.session.user) {
      req.flash('success', "Authenticated as " + req.session.user.name);
      res.redirect('/dashboard');
    }
    return res.render('index.jade', {
      locals: {
        title: 'Login'
      }
    });
  });

  app.post('/login', function(req, res) {
    var params;
    params = req.body;
    if (params.commit.login) {
      return db.getDoc(params.user.name, function(e, doc) {
        var salt, salted_password;
        if (e) {
          req.flash('error', 'User does not exist!');
          res.redirect('/login');
        }
        if (doc) {
          salt = "superblahblah--" + params.user.password;
          salted_password = hash.sha1(params.user.password, salt);
          if (doc.password === salted_password) {
            return req.session.regenerate(function() {
              req.session.user = params.user;
              return res.redirect('/dashboard');
            });
          } else {
            return res.redirect('404');
          }
        }
      });
    } else if (params.commit.signup) {
      return res.redirect('/signup');
    }
  });

  /*
  ROUTE: LOGOUT '/logout' (GET)
  */


  app.get('/logout', function(req, res) {
    return req.session.destroy(function() {
      return res.redirect('/');
    });
  });

  /*
  ROUTE: SIGNUP '/signup' (GET, POST)
  */


  app.get('/signup', function(req, res) {
    if (req.session.user) {
      req.flash('success', "Autenticated as " + req.session.user.name);
      res.redirect('/dashboard');
    }
    return res.render('users/signup.jade', {
      locals: {
        title: 'Signup',
        username: '',
        password: '',
        password_confirmation: '',
        email: ''
      }
    });
  });

  app.post('/signup', function(req, res) {
    var confirm_password, create_user, errors, params, salt, salted_confirm_password, salted_password, user;
    params = req.body;
    errors = [];
    salt = "superblahblah--" + params.user.password;
    salted_password = hash.sha1(params.user.password, salt);
    salted_confirm_password = hash.sha1(params.user.password_confirmation, salt);
    user = {
      name: params.user.name,
      password: salted_password,
      email: params.user.email
    };
    confirm_password = salted_confirm_password;
    create_user = function() {
      return db.exists(function(e, c) {
        if (c === true) {
          return db.saveDoc(user.name, couchdb.toJSON(user), function(e, c) {
            if (e) {
              req.flash('error', "Document update conflict. This user exists!");
              res.redirect('back');
            }
            if (c) {
              req.flash('success', "SUCCESS");
              return req.session.regenerate(function() {
                req.session.user = params.user;
                return res.redirect('/dashboard');
              });
            }
          });
        }
      });
    };
    if (errors.length > 0) {
      errors.forEach(function(err) {
        return req.flash('error', err);
      });
      return res.render('users/signup.jade', {
        locals: {
          title: "Signup",
          username: user.name,
          password: "",
          password_confirmation: "",
          email: user.email
        }
      });
    } else {
      return create_user();
    }
  });

  /*
  Only listen on $ sudo node server.js
  */


  if (!module.parent) {
    fugue.start(app, 3000, null, 10, {
      verbose: true,
      daemonize: true
    });
    console.log("Express server listening on port " + (app.address().port));
  }

}).call(this);
